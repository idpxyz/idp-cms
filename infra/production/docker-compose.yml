services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-news}
      POSTGRES_USER: ${POSTGRES_USER:-news}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-news}
    volumes: [pgdata:/var/lib/postgresql/data]
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-news}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports: ["9000:9000", "9001:9001"]
    volumes: [minio:/data]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc:latest
    depends_on: [minio]
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};
      
      # 创建双桶结构
      mc mb -p local/idp-media-prod-public || true;
      mc mb -p local/idp-media-prod-private || true;
      
      # 保持原有桶兼容性
      mc mb -p local/${MINIO_BUCKET:-media} || true;
      
      # 设置桶权限
      mc anonymous set public local/idp-media-prod-public;
      mc anonymous set none local/idp-media-prod-private;
      mc anonymous set public local/${MINIO_BUCKET:-media};
      
      echo 'MinIO buckets setup completed';
      exit 0;
      "

  opensearch:
    image: opensearchproject/opensearch:3
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.production
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=${OPENSEARCH_SECURITY_DISABLED:-false}
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms4g -Xmx4g
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=93%
      - cluster.routing.allocation.disk.watermark.high=95%
      - cluster.routing.allocation.disk.watermark.flood_stage=97%
    ulimits: { memlock: { soft: -1, hard: -1 } }
    ports: ["9200:9200", "9600:9600"]
    volumes:
      - opensearch_data:/usr/share/opensearch/data
      - opensearch_logs:/usr/share/opensearch/logs

  authoring:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.production
    environment:
      DJANGO_DEBUG: ${DJANGO_DEBUG:-0}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      opensearch:
        condition: service_started
    ports: ["8000:8000"]
    command: python manage.py runserver 0.0.0.0:8000

  celery:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.production
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.prod
      CMS_ORIGIN: http://authoring:8000
      CMS_PUBLIC_URL: ${CMS_PUBLIC_URL:-http://localhost:8000}
      FRONTEND_ORIGIN: http://sites:3000
      FRONTEND_PUBLIC_URL: ${FRONTEND_PUBLIC_URL:-http://localhost:3001}
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_worker

  celery-beat:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.production
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.prod
      CMS_ORIGIN: http://authoring:8000
      CMS_PUBLIC_URL: ${CMS_PUBLIC_URL:-http://localhost:8000}
      FRONTEND_ORIGIN: http://sites:3000
      FRONTEND_PUBLIC_URL: ${FRONTEND_PUBLIC_URL:-http://localhost:3001}
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_beat

  sites:
    build:
      context: ../../sites
      target: production
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE=/cms/api/v1
      - CMS_ORIGIN=http://authoring:8000
      - CMS_PUBLIC_URL=${CMS_PUBLIC_URL:-http://localhost:8000}
      - FRONTEND_PUBLIC_URL=${FRONTEND_PUBLIC_URL:-http://localhost:3001}
      - DJANGO_API_URL=http://authoring:8000
      - NEXT_PUBLIC_API_URL=${CMS_PUBLIC_URL:-http://localhost:8000}
    depends_on:
      - authoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

volumes:
  pgdata: {}
  minio: {}
  opensearch_data: {}
  opensearch_logs: {}
  redis_data: {}
