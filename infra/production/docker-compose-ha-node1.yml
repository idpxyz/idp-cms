# =============================================================================
# 高可用模式 - 应用节点1
# =============================================================================
# 包含无状态应用服务，连接到共享基础设施
# 
# 前置条件：
# 1. 共享基础设施已启动 (docker-compose-ha-infra.yml)
# 2. 网络 idp-ha-network 已创建
# 3. 环境变量已设置 (.env.node1)
# 
# 服务列表：
# - Django (authoring) - 后端API服务
# - Next.js (frontend) - 前端Web服务
# - Celery Worker - 异步任务处理
# - Celery Beat - 定时任务调度 (仅node1)
# 
# 启动命令：
# docker-compose -f docker-compose-ha-node1.yml up -d
# =============================================================================

networks:
  ha-network:
    name: idp-ha-network
    external: true

services:
  # =========================================================================
  # Django/Wagtail 后端应用
  # =========================================================================
  authoring:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: production
    container_name: node1-authoring
    hostname: authoring-node1
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.node1
    environment:
      # 连接到共享基础设施
      POSTGRES_HOST: 172.28.0.10
      REDIS_URL: redis://:${REDIS_PASSWORD:-devredis123}@172.28.0.20:6379/0
      CLICKHOUSE_URL: clickhouse://default:${CLICKHOUSE_PASSWORD:-thends}@172.28.0.30:9000/analytics
      OPENSEARCH_URL: http://172.28.0.40:9200  # 🔒 HTTP（安全插件禁用）
      MINIO_ENDPOINT: http://172.28.0.50:9000
      
      # Django设置
      DJANGO_SETTINGS_MODULE: config.settings.prod
      NODE_NAME: node1
    volumes:
      - ../../:/app
      - ../../logs:/app/logs
      - django_static:/app/staticfiles
      - django_media:/app/media
    ports:
      - "8000:8000"
    networks:
      ha-network:
        ipv4_address: 172.28.1.30
    # 注意：依赖的服务在 docker-compose-ha-infra.yml 中
    # 确保在启动此文件前，infra 已经启动
    command: sh -c "python manage.py migrate --noinput && python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --worker-class gthread --worker-tmp-dir /dev/shm --max-requests 1000 --max-requests-jitter 100 --timeout 120 --graceful-timeout 30 --keep-alive 5 --access-logfile /app/logs/gunicorn-access.log --error-logfile /app/logs/gunicorn-error.log --log-level info"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/readiness/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "app=idp-cms"
      - "role=backend"
      - "node=1"

  # =========================================================================
  # Celery Worker
  # =========================================================================
  celery:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: production
    container_name: node1-celery
    hostname: celery-node1
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.node1
    environment:
      # 连接到共享基础设施
      POSTGRES_HOST: 172.28.0.10
      REDIS_URL: redis://:${REDIS_PASSWORD:-devredis123}@172.28.0.20:6379/0
      CLICKHOUSE_URL: clickhouse://default:${CLICKHOUSE_PASSWORD:-thends}@172.28.0.30:9000/analytics
      OPENSEARCH_URL: http://172.28.0.40:9200  # 🔒 HTTP（安全插件禁用）
      MINIO_ENDPOINT: http://172.28.0.50:9000
      
      DJANGO_SETTINGS_MODULE: config.settings.prod
      NODE_NAME: node1
    volumes:
      - ../../:/app
      - ../../logs:/app/logs
    networks:
      - ha-network
    depends_on:
      - authoring
    command: celery -A config worker -l info -c 4 --max-tasks-per-child=1000
    restart: unless-stopped
    labels:
      - "app=idp-cms"
      - "role=worker"
      - "node=1"

  # =========================================================================
  # Celery Beat (定时任务调度器)
  # 注意: 仅在一个节点运行
  # =========================================================================
  celery-beat:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: production
    container_name: node1-celery-beat
    hostname: celery-beat-node1
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.node1
    environment:
      # 连接到共享基础设施
      POSTGRES_HOST: 172.28.0.10
      REDIS_URL: redis://:${REDIS_PASSWORD:-devredis123}@172.28.0.20:6379/0
      CLICKHOUSE_URL: clickhouse://default:${CLICKHOUSE_PASSWORD:-thends}@172.28.0.30:9000/analytics
      OPENSEARCH_URL: http://172.28.0.40:9200  # 🔒 HTTP（安全插件禁用）
      MINIO_ENDPOINT: http://172.28.0.50:9000
      
      DJANGO_SETTINGS_MODULE: config.settings.prod
      NODE_NAME: node1
    volumes:
      - ../../:/app
      - ../../logs:/app/logs
    networks:
      - ha-network
    depends_on:
      - authoring
    command: python manage.py run_celery_beat
    restart: unless-stopped
    labels:
      - "app=idp-cms"
      - "role=scheduler"
      - "node=1"

  # =========================================================================
  # Next.js 前端应用
  # =========================================================================
  frontend:
    build:
      context: ../../sites
      dockerfile: Dockerfile
      target: production
    container_name: node1-frontend
    hostname: frontend-node1
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${BACKEND_PUBLIC_URL:-http://121.40.167.71:8000}
      - NEXT_PUBLIC_SITE_URL=${FRONTEND_PUBLIC_URL:-https://yourdomain.com}
      - DJANGO_API_URL=http://172.28.1.30:8000
      - NODE_NAME=node1
    ports:
      - "3000:3000"
    networks:
      ha-network:
        ipv4_address: 172.28.1.40
    depends_on:
      authoring:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "app=idp-cms"
      - "role=frontend"
      - "node=1"

volumes:
  django_static:
    name: node1-django-static
  django_media:
    name: node1-django-media
