services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-news}
      POSTGRES_USER: ${POSTGRES_USER:-news}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-news}
    volumes: [ pgdata:/var/lib/postgresql/data ]
    ports: [ "5432:5432" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-news}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports: [ "6379:6379" ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports: [ "9000:9000", "9001:9001" ]
    volumes: [ minio:/data ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  opensearch:
    image: opensearchproject/opensearch:3
    env_file: ../../.env
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=${OPENSEARCH_SECURITY_DISABLED:-false}
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits: { memlock: { soft: -1, hard: -1 } }
    ports: [ "9200:9200", "9600:9600" ]
    volumes:
      - opensearch_data:/usr/share/opensearch/data
      - opensearch_logs:/usr/share/opensearch/logs

  authoring:
    build: { context: ../../, dockerfile: authoring/Dockerfile }
    env_file: ../../.env
    environment:
      DJANGO_DEBUG: ${DJANGO_DEBUG:-0}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
    volumes: [ "../../:/app" ]
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      opensearch:
        condition: service_started
    ports: [ "8000:8000" ]
    command: python authoring/manage.py runserver 0.0.0.0:8000

  portal:
    build: { context: ../../portal/next, dockerfile: Dockerfile }
    env_file: ../../.env
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_FEED_API_URL: ${NEXT_PUBLIC_FEED_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_TRACK_URL: ${NEXT_PUBLIC_TRACK_URL:-http://localhost:8000/api/track}
      SITE_HOSTNAME: ${SITE_HOSTNAME:-localhost}
    ports: [ "3000:3000" ]
    volumes:
      - ../../portal/next:/app
      - /app/node_modules
    depends_on:
      authoring:
        condition: service_started
    command: [ "sh", "-c", "npm run build && npm run start -- -p 3000" ]

volumes:
  pgdata: {}
  minio: {}
  opensearch_data: {}
  opensearch_logs: {}
  redis_data: {}
