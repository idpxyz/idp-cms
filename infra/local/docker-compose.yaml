services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-news}
      POSTGRES_USER: ${POSTGRES_USER:-news}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-news}
    volumes: [pgdata:/var/lib/postgresql/data]
    ports: ["5438:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-news}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports: ["9002:9000", "9001:9001"]
    volumes: [minio:/data]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc:latest
    depends_on: [minio]
    entrypoint: >
      /bin/sh -c " sleep 5; mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin}; mc mb -p local/${MINIO_BUCKET:-media} || true; exit 0; "

  opensearch:
    image: opensearchproject/opensearch:3
    env_file: ../../.env
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=${OPENSEARCH_SECURITY_DISABLED:-true}
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits: { memlock: { soft: -1, hard: -1 } }
    ports: ["9200:9200", "9600:9600"]
    volumes:
      - opensearch_data:/usr/share/opensearch/data
      - opensearch_logs:/usr/share/opensearch/logs
      - ./opensearch.yml:/usr/share/opensearch/config/opensearch.yml:ro

  os-dashboards:
    image: opensearchproject/opensearch-dashboards:3
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - OPENSEARCH_SECURITY_DISABLED=true
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    ports: ["5601:5601"]
    volumes:
      - ./opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml:ro
    depends_on: [opensearch]

  clickhouse:
    image: clickhouse/clickhouse-server:24.3
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: "thends"
    ports: ["8123:8123", "9123:9000"]
    volumes:
      - chdata:/var/lib/clickhouse
      - ../../:/app
      - ./clickhouse-users.xml:/etc/clickhouse-server/users.d/custom-users.xml
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8123/ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  authoring:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file: ../../.env
    environment:
      # 开发期常见主机放行（可在外部用 ALLOWED_HOSTS 覆写）
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,192.168.8.195,portal.local,site-a.local,site-b.local}
      DJANGO_SETTINGS_MODULE: config.settings.dev
      DJANGO_DEBUG: "1"
    user: "${DEV_UID:-1000}:${DEV_GID:-1000}"
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      opensearch:
        condition: service_started
      clickhouse:
        condition: service_healthy
    ports: ["8000:8000"] # 如使用 Cursor 端口转发，可去掉此行避免端口冲突
    command: sh /app/infra/local/start_authoring.sh

  celery:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file: ../../.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.dev
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_worker

  celery-beat:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file: ../../.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.dev
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_beat

  portal:
    build: { context: ../../portal/next, dockerfile: Dockerfile }
    env_file: ../../.env
    environment:
      # ★ SSR 在容器内访问后端（服务名 authoring）
      DJANGO_API_URL: ${DJANGO_API_URL:-http://authoring:8000}
      FEED_API_URL: ${FEED_API_URL:-http://authoring:8000}
      # ★ CSR 在浏览器访问后端；Cursor 端口转发时默认走 localhost
      NEXT_PUBLIC_FEED_API_URL: ${NEXT_PUBLIC_FEED_API_URL:-http://localhost:8000}
      # 事件上报（如你 .env 已有别名，可自行覆写）
      NEXT_PUBLIC_TRACK_URL: ${NEXT_PUBLIC_TRACK_URL:-http://localhost:8000/api/track}
      # 可选：仅在你的代码读取该变量时有用
      SITE_HOSTNAME: ${SITE_HOSTNAME:-site-a.local}
    ports: ["3000:3000"] # 如使用 Cursor 端口转发，可去掉此行避免端口冲突
    volumes:
      - ../../portal/next:/app
      - /app/node_modules
    depends_on:
      authoring:
        condition: service_started
    user: "root"
    command:
      [
        "sh",
        "-c",
        "npm install && rm -rf /app/.next && mkdir -p /app/.next && touch /app/.next/fallback-build-manifest.json && echo '{}' > /app/.next/fallback-build-manifest.json && npm run dev -- -p 3000",
      ]

volumes:
  pgdata: {}
  chdata: {}
  minio: {}
  opensearch_data: {}
  opensearch_logs: {}
  redis_data: {}
