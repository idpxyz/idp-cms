# 安全强化版 Docker Compose 配置
# 修复了主要安全问题：非root用户、资源限制、固定镜像版本

services:
  postgres:
    image: postgres:16.1-alpine  # 固定版本
    user: "999:999"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-news}
      POSTGRES_USER: ${POSTGRES_USER:-news}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-news}
    volumes: [pgdata:/var/lib/postgresql/data]
    ports: ["5438:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-news}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7.2-alpine  # 固定版本
    user: "999:999"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-02-17T01-15-57Z  # 固定版本
    user: "1000:1000"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports: ["9002:9000", "9001:9001"]
    volumes: [minio:/data]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc:RELEASE.2024-02-16T11-05-48Z  # 固定版本
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    depends_on: [minio]
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};
      mc mb -p local/idp-media-prod-public || true;
      mc mb -p local/idp-media-prod-private || true;
      mc mb -p local/${MINIO_BUCKET:-media} || true;
      mc anonymous set public local/idp-media-prod-public;
      mc anonymous set none local/idp-media-prod-private;
      mc anonymous set public local/${MINIO_BUCKET:-media};
      echo 'MinIO buckets setup completed';
      exit 0;
      "

  opensearch:
    image: opensearchproject/opensearch:2.11.1  # 固定版本
    user: "1000:1000"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"
    env_file: ../../.env
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=${OPENSEARCH_SECURITY_DISABLED:-true}
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g
    ulimits: { memlock: { soft: -1, hard: -1 } }
    ports: ["9200:9200", "9600:9600"]
    volumes:
      - opensearch_data:/usr/share/opensearch/data
      - opensearch_logs:/usr/share/opensearch/logs
      - ./opensearch.yml:/usr/share/opensearch/config/opensearch.yml:ro

  os-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1  # 固定版本
    user: "1000:1000"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - OPENSEARCH_SECURITY_DISABLED=true
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    ports: ["5601:5601"]
    volumes:
      - ./opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml:ro
    depends_on: [opensearch]

  clickhouse:
    image: clickhouse/clickhouse-server:23.12.1.1368  # 固定版本
    user: "101:101"  # ClickHouse用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.5"
        reservations:
          memory: 1G
          cpus: "0.75"
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: "thends"
    ports: ["8123:8123", "9123:9000"]
    volumes:
      - chdata:/var/lib/clickhouse
      - ../../:/app:ro  # 只读挂载
      - ./clickhouse-users.xml:/etc/clickhouse-server/users.d/custom-users.xml:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  authoring:
    build: { context: ../../, dockerfile: Dockerfile, target: production }  # 使用生产目标
    user: "${DEV_UID:-1000}:${DEV_GID:-1000}"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.5"
        reservations:
          memory: 1G
          cpus: "0.75"
    env_file: ../../.env
    environment:
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,192.168.8.195,portal.local}
      DJANGO_SETTINGS_MODULE: config.settings.dev
      DJANGO_DEBUG: "1"
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-http://minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-media}
      MINIO_PUBLIC_DOMAIN: ${MINIO_PUBLIC_DOMAIN:-localhost:9002}
    volumes: 
      - "../../:/app:ro"  # 只读挂载源代码
      - "app_media:/app/media"  # 独立媒体卷
      - "app_static:/app/static"  # 独立静态文件卷
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      opensearch:
        condition: service_started
      clickhouse:
        condition: service_healthy
    ports: ["8000:8000"]
    command: sh /app/infra/local/start_authoring.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/readiness/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  celery:
    build: { context: ../../, dockerfile: Dockerfile, target: production }
    user: "${DEV_UID:-1000}:${DEV_GID:-1000}"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    env_file: ../../.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.dev
    volumes: 
      - "../../:/app:ro"
      - "app_media:/app/media"
      - "app_static:/app/static"
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_worker

  celery-beat:
    build: { context: ../../, dockerfile: Dockerfile, target: production }
    user: "${DEV_UID:-1000}:${DEV_GID:-1000}"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    env_file: ../../.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.dev
    volumes: 
      - "../../:/app:ro"
      - "app_media:/app/media"
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_beat

  portal:
    build: { context: ../../portal/next, dockerfile: Dockerfile, target: production }  # 使用生产目标
    user: "1001:1001"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    env_file: ../../.env
    environment:
      DJANGO_API_URL: ${DJANGO_API_URL:-http://authoring:8000}
      FEED_API_URL: ${FEED_API_URL:-http://authoring:8000}
      NEXT_PUBLIC_FEED_API_URL: ${NEXT_PUBLIC_FEED_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_TRACK_URL: ${NEXT_PUBLIC_TRACK_URL:-http://localhost:8000/api/track}
      SITE_HOSTNAME: ${SITE_HOSTNAME:-localhost}
    ports: ["3000:3000"]
    volumes:
      - ../../portal/next:/app:ro  # 只读挂载
      - portal_node_modules:/app/node_modules
      - portal_next:/app/.next
    depends_on:
      authoring:
        condition: service_started

  sites:
    build:
      context: ../../sites
      target: production  # 使用生产目标
    user: "1001:1001"  # 非root用户
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    ports:
      - "3001:3000"
    volumes:
      - ../../sites:/app:ro  # 只读挂载
      - sites_node_modules:/app/node_modules
      - sites_next:/app/.next
    environment:
      - NODE_ENV=production  # 生产环境
      - NEXT_PUBLIC_API_BASE=/cms/api/v1
      - CMS_ORIGIN=http://authoring:8000
      - NEXT_PUBLIC_SITE_URL=http://sites:3000
    depends_on:
      - authoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

volumes:
  pgdata: {}
  chdata: {}
  minio: {}
  opensearch_data: {}
  opensearch_logs: {}
  redis_data: {}
  app_media: {}
  app_static: {}
  portal_node_modules: {}
  portal_next: {}
  sites_node_modules: {}
  sites_next: {}
