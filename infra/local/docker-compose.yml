services:
  postgres:
    image: postgres:17  # 🔒 锁定为开发环境实际版本 17.6
    env_file:
      - ../../.env.core
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-news}
      POSTGRES_USER: ${POSTGRES_USER:-news}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-news}
    volumes: [pgdata:/var/lib/postgresql/data]
    ports: ["5438:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-news}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z  # 🔒 锁定为开发环境实际版本
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports: ["9002:9000", "9001:9001"]
    volumes: [minio:/data]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc:RELEASE.2025-07-21T05-28-08Z  # 🔒 锁定为开发环境实际版本
    depends_on: [minio]
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};

      # 创建双桶结构
      mc mb -p local/idp-media-prod-public || true;
      mc mb -p local/idp-media-prod-private || true;

      # 保持原有桶兼容性
      mc mb -p local/${MINIO_BUCKET:-media} || true;

      # 设置桶权限
      mc anonymous set public local/idp-media-prod-public;
      mc anonymous set none local/idp-media-prod-private;
      mc anonymous set public local/${MINIO_BUCKET:-media};
      mc anonymous set public local/${MINIO_BUCKET:-media}/images;

      echo 'MinIO buckets setup completed:';
      echo '  - idp-media-prod-public (public)';
      echo '  - idp-media-prod-private (private)';
      echo '  - ${MINIO_BUCKET:-media} (legacy compatibility)';
      exit 0;
      "

  opensearch:
    image: opensearchproject/opensearch:2.11.0  # 🔧 统一为生产环境版本
    env_file:
      - ../../.env.core
      - ../../.env.features
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=${OPENSEARCH_SECURITY_DISABLED:-true}
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_PASSWORD:-OpenSearchDev123!}  # 🔧 兼容 2.11 要求
    ulimits: { memlock: { soft: -1, hard: -1 } }
    ports: ["9200:9200", "9600:9600"]
    volumes:
      - opensearch_data:/usr/share/opensearch/data
      - opensearch_logs:/usr/share/opensearch/logs
      - ./opensearch.yml:/usr/share/opensearch/config/opensearch.yml:ro

  os-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.0  # 🔧 统一为生产环境版本
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - OPENSEARCH_SECURITY_DISABLED=true
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    ports: ["5601:5601"]
    volumes:
      - ./opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml:ro
    depends_on: [opensearch]

  clickhouse:
    image: clickhouse/clickhouse-server:24.3
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: "thends"
    ports: ["8123:8123", "9123:9000"]
    volumes:
      - chdata:/var/lib/clickhouse
      - ../../:/app
      - ./clickhouse-users.xml:/etc/clickhouse-server/users.d/custom-users.xml
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8123/ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  authoring:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file:
      - ../../.env.core
      - ../../.env.features  
      - ../../.env.development
    environment:
      # 动态覆盖配置（仅在需要时使用）
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,192.168.8.195}
      # 新的统一环境变量配置
      CMS_ORIGIN: http://authoring:8000
      CMS_PUBLIC_URL: http://localhost:8000
      FRONTEND_ORIGIN: http://localhost:3000
      FRONTEND_PUBLIC_URL: http://localhost:3001
    user: "${DEV_UID:-1000}:${DEV_GID:-1000}"
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      opensearch:
        condition: service_started
      clickhouse:
        condition: service_healthy
    ports: ["8000:8000"] # 如使用 Cursor 端口转发，可去掉此行避免端口冲突
    command: sh /app/infra/local/start_authoring.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/readiness/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  celery:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.development
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.dev
      ENABLE_MEDIA_CLEANUP: "0"
      ENABLE_RENDITION_CLEANUP: "0"
      # 新的统一环境变量配置
      CMS_ORIGIN: http://authoring:8000
      CMS_PUBLIC_URL: http://localhost:8000
      FRONTEND_ORIGIN: http://localhost:3000
      FRONTEND_PUBLIC_URL: http://localhost:3001
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_worker

  celery-beat:
    build: { context: ../../, dockerfile: Dockerfile }
    env_file:
      - ../../.env.core
      - ../../.env.features
      - ../../.env.development
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.dev
      ENABLE_MEDIA_CLEANUP: "0"
      ENABLE_RENDITION_CLEANUP: "0"
      # 新的统一环境变量配置
      CMS_ORIGIN: http://authoring:8000
      CMS_PUBLIC_URL: http://localhost:8000
      FRONTEND_ORIGIN: http://localhost:3000
      FRONTEND_PUBLIC_URL: http://localhost:3001
    volumes: ["../../:/app"]
    working_dir: /app
    depends_on:
      authoring:
        condition: service_started
      redis:
        condition: service_healthy
    command: python manage.py run_celery_beat

  sites:
    build:
      context: ../../sites
      target: development  # 保持开发模式，但优化配置
    ports:
      - "3001:3000"
    volumes:
      - ../../sites:/app
      # 注释掉node_modules卷，使用宿主机的node_modules（包含SWR）
      # - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      # 🚀 性能优化环境变量
      - NEXT_TELEMETRY_DISABLED=1  # 禁用遥测，减少开销
      - WATCHPACK_POLLING=false  # 禁用轮询，减少CPU使用
      - NEXT_PUBLIC_API_BASE=/cms/api/v1
      # 统一环境变量配置
      - CMS_ORIGIN=http://authoring:8000
      - CMS_PUBLIC_URL=http://localhost:8000
      - FRONTEND_ORIGIN=http://localhost:3000
      - FRONTEND_PUBLIC_URL=http://localhost:3001
      - NEXT_PUBLIC_SITE_URL=http://192.168.8.195:3001
      # 向后兼容的环境变量
      - DJANGO_API_URL=http://authoring:8000
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - authoring
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --spider -q http://localhost:3000/api/ready && (pgrep -f warmup || sh /app/warmup.sh &)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s  # 给足够时间启动和预热

volumes:
  pgdata: {}
  chdata: {}
  minio: {}
  opensearch_data: {}
  opensearch_logs: {}
  redis_data: {}
