// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/beijing" | "/config-demo" | "/hangzhou" | "/portal" | "/portal/analytics" | "/portal/article/[slug]" | "/portal/category/[slug]" | "/portal/check-login-status" | "/portal/comments" | "/portal/demo" | "/portal/demo/ai-governance" | "/portal/demo/grid-layout" | "/portal/demo/hero-banner" | "/portal/demo/hero-carousel" | "/portal/demo/hybrid-design" | "/portal/demo/masonry-layout" | "/portal/demo/visual-first" | "/portal/favorites" | "/portal/history" | "/portal/monitor" | "/portal/news" | "/portal/profile" | "/portal/search" | "/portal/search/enhanced" | "/portal/settings" | "/portal/tags" | "/portal/tags/[slug]" | "/portal/test-behavior-tracking" | "/portal/test-comment-integration" | "/portal/test-comment-like" | "/portal/test-headlines" | "/portal/test-login" | "/portal/theme-demo" | "/portal/theme-test" | "/portal/topic/[slug]" | "/shanghai" | "/shanghai/theme-demo" | "/shenzhen"
type AppRouteHandlerRoutes = "/api/analytics" | "/api/analytics/stream" | "/api/articles" | "/api/articles/[slug]" | "/api/articles/[slug]/recommendations" | "/api/backend/[...path]" | "/api/basic/sse" | "/api/categories" | "/api/channels" | "/api/channels/personalized" | "/api/feed" | "/api/frontend/layout" | "/api/frontend/modules" | "/api/frontend/theme" | "/api/headlines" | "/api/health" | "/api/hot" | "/api/internal/preview" | "/api/media-proxy/[...path]" | "/api/mock/analytics/stream" | "/api/monitoring/dashboard" | "/api/monitoring/health" | "/api/news" | "/api/proxy/articles" | "/api/proxy/cache" | "/api/proxy/site-settings" | "/api/ready" | "/api/revalidate" | "/api/robots" | "/api/search" | "/api/search/suggest" | "/api/search/trending" | "/api/site-settings" | "/api/startup" | "/api/tags/[slug]" | "/api/tags/top" | "/api/test/headlines" | "/api/topics" | "/api/topics/[slug]" | "/api/topics/db" | "/api/topics/db/[slug]" | "/api/topics/db/[slug]/articles" | "/api/track" | "/portal/robots.txt"
type PageRoutes = never
type LayoutRoutes = "/" | "/beijing" | "/hangzhou" | "/portal" | "/shanghai" | "/shenzhen"
type RedirectRoutes = never
type RewriteRoutes = "/cms/[[...path]]"
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/analytics": {}
  "/api/analytics/stream": {}
  "/api/articles": {}
  "/api/articles/[slug]": { "slug": string; }
  "/api/articles/[slug]/recommendations": { "slug": string; }
  "/api/backend/[...path]": { "path": string[]; }
  "/api/basic/sse": {}
  "/api/categories": {}
  "/api/channels": {}
  "/api/channels/personalized": {}
  "/api/feed": {}
  "/api/frontend/layout": {}
  "/api/frontend/modules": {}
  "/api/frontend/theme": {}
  "/api/headlines": {}
  "/api/health": {}
  "/api/hot": {}
  "/api/internal/preview": {}
  "/api/media-proxy/[...path]": { "path": string[]; }
  "/api/mock/analytics/stream": {}
  "/api/monitoring/dashboard": {}
  "/api/monitoring/health": {}
  "/api/news": {}
  "/api/proxy/articles": {}
  "/api/proxy/cache": {}
  "/api/proxy/site-settings": {}
  "/api/ready": {}
  "/api/revalidate": {}
  "/api/robots": {}
  "/api/search": {}
  "/api/search/suggest": {}
  "/api/search/trending": {}
  "/api/site-settings": {}
  "/api/startup": {}
  "/api/tags/[slug]": { "slug": string; }
  "/api/tags/top": {}
  "/api/test/headlines": {}
  "/api/topics": {}
  "/api/topics/[slug]": { "slug": string; }
  "/api/topics/db": {}
  "/api/topics/db/[slug]": { "slug": string; }
  "/api/topics/db/[slug]/articles": { "slug": string; }
  "/api/track": {}
  "/beijing": {}
  "/cms/[[...path]]": { "path"?: string[]; }
  "/config-demo": {}
  "/hangzhou": {}
  "/portal": {}
  "/portal/analytics": {}
  "/portal/article/[slug]": { "slug": string; }
  "/portal/category/[slug]": { "slug": string; }
  "/portal/check-login-status": {}
  "/portal/comments": {}
  "/portal/demo": {}
  "/portal/demo/ai-governance": {}
  "/portal/demo/grid-layout": {}
  "/portal/demo/hero-banner": {}
  "/portal/demo/hero-carousel": {}
  "/portal/demo/hybrid-design": {}
  "/portal/demo/masonry-layout": {}
  "/portal/demo/visual-first": {}
  "/portal/favorites": {}
  "/portal/history": {}
  "/portal/monitor": {}
  "/portal/news": {}
  "/portal/profile": {}
  "/portal/robots.txt": {}
  "/portal/search": {}
  "/portal/search/enhanced": {}
  "/portal/settings": {}
  "/portal/tags": {}
  "/portal/tags/[slug]": { "slug": string; }
  "/portal/test-behavior-tracking": {}
  "/portal/test-comment-integration": {}
  "/portal/test-comment-like": {}
  "/portal/test-headlines": {}
  "/portal/test-login": {}
  "/portal/theme-demo": {}
  "/portal/theme-test": {}
  "/portal/topic/[slug]": { "slug": string; }
  "/shanghai": {}
  "/shanghai/theme-demo": {}
  "/shenzhen": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/beijing": never
  "/hangzhou": never
  "/portal": never
  "/shanghai": never
  "/shenzhen": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
